{"version":3,"sources":["commons/components/LoadingInput.tsx","commons/components/PDFViewer.tsx","commons/hooks/index.ts","features/transfers/components/PacientFieldset.tsx","features/transfers/components/TransferForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LoadingInput","props","useState","count","setCount","placeholder","loading","useEffect","timeout","setInterval","clearInterval","loadingPlaceholder","Array","join","PDFViewer","url","height","PDFObject","embed","fallbackLink","id","style","useFetch","callback","deps","state","setState","fetchRef","callbackRef","useRef","current","useCallbackRef","useCallback","a","completed","response","isArray","Promise","all","map","r","json","data","every","ok","error","request","catch","e","initial","carnet","nombre","empresa","estado","paciente","onChange","lastCarnet","fetch","baseUrl","stateOfGetPaciente","getPaciente","onChangeCarnet","value","target","toUpperCase","onBlurCarnet","length","title","Form","Row","Group","as","Col","sm","controlId","Label","Control","type","isInvalid","onBlur","readOnly","App","doctor","proveedor","servicios","formState","updateForm","nota","servicioSolicitado","updateServiciosSolicitado","onChangeDoctor","doctores","find","parseInt","onChangeProveedor","proveedores","Math","random","console","log","method","headers","body","JSON","stringify","servicio","stateOfSubmit","submit","onSubmit","preventDefault","stateOfLoadInitData","loadData","proveedoresAdecuados","updateProveedoresAdecuados","serviciosDisponibles","updateServiciosDisponibles","nuevosProveedores","filter","rs","some","ps","np","renderPdf","marginTop","marginBottom","PacientFieldset","String","Table","width","index","Button","variant","onClick","v","i","className","selectedService","Spinner","animation","size","Modal","show","aria-labelledby","centered","Header","closeButton","Title","Body","Footer","Navbar","bg","Brand","href","Nav","Link","inline","Container","TransferForm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mYAEaA,EAAe,SAACC,GAAiE,IAAD,EAC/DC,mBAAS,GADsD,mBAClFC,EADkF,KAC3EC,EAD2E,KAElFC,EAAwBJ,EAAxBI,YAAaC,EAAWL,EAAXK,QAEpBC,qBAAU,WACN,IAAMC,EAAUC,aAAY,WACxBL,GAAS,SAACD,GAAD,OAAUA,EAAM,GAAG,OAC7B,KACH,OAAO,kBAAIO,cAAcF,MAC1B,IACH,IAAMG,EAAqBN,GAAeC,EAAW,IAAIM,MAAMT,EAAM,GAAGU,KAAK,KAAQ,IACrF,OAAO,iDAAWZ,GAAX,IAAkBI,YAAaM,M,iBCVnC,SAASG,EAAT,GAAiE,IAA7CC,EAA4C,EAA5CA,IAAKC,EAAuC,EAAvCA,OAQ5B,OAPAT,qBAAU,WAKRU,IAAUC,MAAMH,EAAK,gBAJP,CACZI,aAAc,4JAIf,CAACJ,IACG,qBAAKK,GAAG,eAAeC,MAAO,CAACL,Y,6BCS7BM,EAAW,SAACC,EAAuDC,GAAgC,IAAD,EACnFtB,mBAAqB,IAD8D,mBACtGuB,EADsG,KAC/FC,EAD+F,KAEvGC,EApBsB,SAAoCJ,EAAaC,GAC7E,IAAMI,EAAcC,iBAAON,GAI3B,OAHAhB,qBAAU,WACXqB,EAAYE,QAAUP,IAClB,CAACC,IACGI,EAeUG,CAAeR,EAAUC,GA+B1C,MAAO,CAACC,EA9BKO,uBAAY,YACV,uCAAG,8BAAAC,EAAA,6DACdP,EAAS,CACPQ,WAAW,IAFC,SAISP,EAASG,UAJlB,cAIRK,EAJQ,gBAKMvB,MAAMwB,QAAQD,GAAYE,QAAQC,IAAIH,EAASI,KAAI,SAAAC,GAAC,OAAEA,EAAEC,WAAWN,EAASM,OALlF,OAKRC,EALQ,OAMX9B,MAAMwB,QAAQD,GAAYA,EAASQ,OAAM,SAAAH,GAAC,OAAEA,EAAEI,MAAMT,EAASS,GAC9DlB,EAAS,CACPQ,WAAW,EACXQ,OACAG,OAAO,IAVG,2CAAH,qDAqBbC,GAAUC,OAAM,SAACC,GACftB,EAAS,CACPQ,WAAW,EACXW,OAAO,SAGX,M,QC9BEI,EAAU,CACd7B,GAAI,EACJ8B,OAAQ,GACRC,OAAQ,GACRC,QAAS,CACPD,OAAQ,GACRE,OAAQ,KAIG,cAAkC,IAAhCC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,SACnBC,EAAa3B,iBAAOyB,EAASJ,QADW,EAEJ5B,GAAS,kBAAImC,MAAMC,IAAO,4BAAwBJ,EAASJ,WAAW,CAACI,EAASJ,SAF5E,mBAEvCS,EAFuC,KAEnBC,EAFmB,KAIxCC,EAAiB7B,uBAAuD,SAACgB,GAC7E,IAAMc,EAAQd,EAAEe,OAAOD,MAAME,cAC7BT,EAAS,2BACJN,GADG,IAENC,OAAQY,OAET,CAACR,IAEEW,EAAejC,uBAAY,SAACgB,GAC7BQ,EAAW1B,SAAWwB,EAASJ,SAChCM,EAAW1B,QAAUwB,EAASJ,OAC9BU,OAED,CAACN,EAASJ,SAWb,OATA3C,qBAAU,WACR,GAAGoD,EAAmBzB,YAAcyB,EAAmBd,MAAM,CAC3D,IAAMH,EAAOiB,EAAmBjB,KAC7BA,EAAKwB,QACNX,EAASb,EAAK,OAGjB,CAACiB,IAEG,2BAAUQ,MAAM,WAAhB,UACP,8CACA,eAACC,EAAA,EAAKC,IAAN,WACE,eAACD,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,IAAE,EAACC,UAAU,kBAAlC,UACE,cAACN,EAAA,EAAKO,MAAN,2BACA,cAACP,EAAA,EAAKQ,QAAN,CAAcC,KAAK,OACjBC,UAAWnB,EAAmBzB,YAAcyB,EAAmBd,QAAUc,EAAmBjB,KAAKwB,OACjGX,SAAUM,EACVkB,OAAQd,EAAcH,MAAOR,EAASJ,YAE1C,eAACkB,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,GAAI,EAAGC,UAAU,kBAAtC,UACE,cAACN,EAAA,EAAKO,MAAN,qBACA,cAACP,EAAA,EAAKQ,QAAN,CAAeL,GAAIvE,EAAcM,SAAwC,IAA/BqD,EAAmBzB,UAC3D7B,aAA4C,IAA/BsD,EAAmBzB,UAAoB,WAAayB,EAAmBd,MAAQ,QAAU,GACtGmC,UAAQ,EAACH,KAAK,OAAOf,MAAOR,EAASH,OAAOa,sBAGlD,eAACI,EAAA,EAAKC,IAAN,WACE,eAACD,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,GAAI,EAAGC,UAAU,UAAtC,UACE,cAACN,EAAA,EAAKO,MAAN,sBACA,cAACP,EAAA,EAAKQ,QAAN,CAAcL,GAAIvE,EAAcM,SAAwC,IAA/BqD,EAAmBzB,UAC1D7B,aAA4C,IAA/BsD,EAAmBzB,UAAoB,WAAayB,EAAmBd,MAAQ,QAAU,GACtGmC,UAAQ,EAACH,KAAK,OAAOf,MAAOR,EAASF,QAAQD,OAAOa,mBAExD,eAACI,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,IAAE,EAACC,UAAU,SAAlC,UACE,cAACN,EAAA,EAAKO,MAAN,qBACA,cAACP,EAAA,EAAKQ,QAAN,CAAeL,GAAIvE,EAAcM,SAAwC,IAA/BqD,EAAmBzB,UAC3D7B,aAA4C,IAA/BsD,EAAmBzB,UAAoB,WAAayB,EAAmBd,MAAQ,QAAU,GACtGmC,UAAQ,EAACH,KAAK,OAAOC,UAAoC,QAAzBxB,EAASF,QAAQC,OAAgBS,MAAOR,EAASF,QAAQC,OAAOW,0BC6OxG,IAEeiB,EAlRf,WAAqC,IAAD,EACF/E,mBAAoB,CAClDoD,SAAU,CACRlC,GAAI,EACJ8B,OAAQ,GACRC,OAAQ,GACRC,QAAS,CACPD,OAAQ,GACRE,OAAQ,KAGZ6B,OAAQ,CACN9D,GAAI,EACJ+B,OAAQ,IAEVgC,UAAW,CACT/D,GAAI,EACJ+B,OAAQ,GACRiC,UAAW,IAEbA,UAAW,KApBqB,mBAC3BC,EAD2B,KAChBC,EADgB,OAuBsBpF,mBAAS,CAC/DkB,GAAI,EACJmE,KAAM,KAzB0B,mBAuB3BC,EAvB2B,KAuBPC,EAvBO,KA4B5BC,EAAiB1D,uBAAuD,SAACgB,GAC7EsC,EAAW,2BACND,GADK,IAERH,OAAQS,EAASC,MAAK,SAAAV,GAAM,OAAEA,EAAO9D,IAAMyE,SAAS7C,EAAEe,OAAOD,WAAW,CAAC1C,GAAI,EAAG+B,OAAQ,SAEzF,CAACkC,IAEES,EAAoB9D,uBAAuD,SAACgB,GAChFsC,EAAW,2BACND,GADK,IAERF,UAAWY,EAAYH,MAAK,SAAAT,GAAS,OAAEA,EAAU/D,IAAMyE,SAAS7C,EAAEe,OAAOD,WAAW,CAAC1C,GAAI,EAAG+B,OAAQ,GAAIiC,UAAW,SAEpH,CAACC,IAEEpD,EAAIJ,iBAAOmE,KAAKC,UACtBC,QAAQC,IAAI,SAAUlE,GA3CY,MA6CFX,GAAS,WACvC,OAAOmC,MAAMC,IAAQ,kBAAmB,CACtC0C,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnB,YAAenB,EAAU/B,SAASlC,GAClC,UAAaiE,EAAUH,OAAO9D,GAC9B,aAAgBiE,EAAUF,UAAU/D,GACpC,cAAiBiE,EAAUD,UAAU7C,KAAI,SAACkE,GAAD,OAAYA,EAASrF,YAGjE,CAACiE,IA1D8B,mBA6C3BqB,EA7C2B,KA6CZC,EA7CY,KA4D5BC,EAAW5E,uBAAY,SAACgB,GAC5BA,EAAE6D,iBACFF,MACC,IA/D+B,EAiEMrF,GAAS,WAC/C,OAAOe,QAAQC,IAAI,CACjBmB,MAAMC,IAAU,aAChBD,MAAMC,IAAU,gBAChBD,MAAMC,IAAU,kBAEjB,IAvE+B,mBAiE3BoD,EAjE2B,KAiENC,EAjEM,OAwEUD,EAAoBpE,MAAQ,CAAC,GAAG,GAAG,IAxE7C,mBAwE3BiD,EAxE2B,KAwEjBI,EAxEiB,KAwEJX,EAxEI,OA0EyBlF,mBAAS6F,GA1ElC,mBA0E3BiB,EA1E2B,KA0ELC,EA1EK,OA2EyB/G,mBAASkF,GA3ElC,mBA2E3B8B,EA3E2B,KA2ELC,EA3EK,KA6ElC5G,qBAAU,kBAAIwG,MAAY,IAC1BxG,qBAAU,WACR,GAAGuG,EAAoB5E,YAAc4E,EAAoBjE,MAAM,CAC7D,IAAMuE,EAAoBrB,EAAYsB,QAAO,SAAAlC,GAC3C,OAAOE,EAAUD,UAAUzC,OAAM,SAAA2E,GAC/B,OAAOnC,EAAUC,UAAUmC,MAAK,SAAAC,GAAE,OAAIA,EAAGpG,IAAKkG,EAAGlG,YAGrD6F,EACEG,GAEEA,EAAkBG,MAAK,SAAAE,GAAE,OAAIA,EAAGrG,IAAMiE,EAAUF,UAAU/D,OAC5DkE,EAAW,2BACND,GADK,IAERF,UAAW,CACT/D,GAAI,EACJ+B,OAAQ,GACRiC,UAAW,OAIc,GAA5BgC,EAAkBlD,QACnBoB,EAAW,2BACND,GADK,IAERF,UAAWiC,EAAkB,MAGjC,IAAMF,EAAuB9B,EAAUiC,QAAO,SAAA9C,GAC5C,OAAO6C,EAAkBG,MAAK,SAAApC,GAC5B,OAAQE,EAAUD,UAAUmC,MAAK,SAAAD,GAAE,OAAIA,EAAGlG,IAAKmD,EAAGnD,OAAO+D,EAAUC,UAAUmC,MAAK,SAAAC,GAAE,OAAIA,EAAGpG,IAAMmD,EAAGnD,YAGxG+F,EAA2BD,MAE5B,CAAC7B,EAAUD,UAAW0B,IAEzB,IAgBMY,EAAY,WAChB,IAAM3G,EAAM2F,EAAchE,MAAQgE,EAAchE,KAAK3B,IACrD,OAAOA,EAAM,cAACD,EAAD,CAAWC,IAAKA,EAAKC,OAAQ,MAAoB,MAwHhE,OAtHAkF,QAAQC,IAAI,YAAad,GAsHlB,qCACL,uDArHO,qCACP,eAACjB,EAAA,EAAD,CAAM/C,MAAO,CAACsG,UAAU,GAAIC,aAAa,IAAKhB,SAAUA,EAAxD,UACE,cAACiB,EAAD,CAAiBvE,SAAU+B,EAAU/B,SAAUC,SAAU,SAACD,GACxDgC,EAAW,2BACND,GADK,IAER/B,iBAGJ,qCACE,4CACA,eAACc,EAAA,EAAKE,MAAN,CAAYI,UAAU,SAAtB,UACI,cAACN,EAAA,EAAKO,MAAN,qBACA,eAACP,EAAA,EAAKQ,QAAN,CAAcL,GAAG,SAASM,KAAK,OAAOtB,SAAUmC,EAAgB5B,MAAOuB,EAAUH,OAAO9D,GAAxF,UACE,wBAAQA,GAAG,MACVuE,EAASpD,KAAI,SAAC2C,GACb,OAAO,wBAAwB9D,GAAI0G,OAAO5C,EAAO9D,IAAK0C,MAAOgE,OAAO5C,EAAO9D,IAApE,SAA0E8D,EAAO/B,QAApE+B,EAAO9D,gBAKrC,qCACE,+CACA,eAAC2G,EAAA,EAAD,WACE,gCACE,+BACE,oBAAI1G,MAAO,CAAC2G,MAAM,GAAlB,eACA,wCACA,sCACA,oBAAI3G,MAAO,CAAC2G,MAAM,UAGtB,kCApDC3C,EAAUD,UAAU7C,KAAI,SAACuB,EAAOmE,GAAR,OAC7B,+BACE,6BAAKA,EAAM,IACX,6BAAKnE,EAAMX,SACX,6BAAKW,EAAMyB,OACX,6BAAI,cAAC2C,EAAA,EAAD,CAAQC,QAAQ,OAAOC,QAAS,WAClC9C,EAAW,2BACND,GADK,IAERD,UAAWC,EAAUD,UAAUiC,QAAO,SAACgB,EAAGC,GAAJ,OAAQL,GAASK,SAExDC,UAAU,WALT,SAKoB,cAAC,IAAD,cA4CpB,+BACE,6BAAKlD,EAAUD,UAAUlB,OAAO,IAChC,6BAAI,eAACE,EAAA,EAAKQ,QAAN,CAAcL,GAAG,SACnBT,MAAO0B,EAAmBpE,GAC1BmC,SAAU,SAACP,GACXkD,QAAQC,IAAI,4BAA6BnD,EAAEe,OAAOD,OAClD2B,EAA0B,2BACrBD,GADoB,IAEvBpE,GAAIyE,SAAS7C,EAAEe,OAAOD,WANtB,UASF,wBAAQ1C,GAAG,MACV8F,EAAqB3E,KAAI,SAACkE,GAAD,OACxB,wBAA0BrF,GAAI0G,OAAOrB,EAASrF,IAAK0C,MAAOgE,OAAOrB,EAASrF,IAA1E,SAAgFqF,EAAStD,QAA5EsD,EAASrF,YAG1B,6BAAI,cAACgD,EAAA,EAAKQ,QAAN,CAAcL,GAAG,WACnBT,MAAO0B,EAAmBD,KAC1BhC,SAAU,SAACP,GACXyC,EAA0B,2BACrBD,GADoB,IAEvBD,KAAMvC,EAAEe,OAAOD,cAGnB,6BAAI,cAACoE,EAAA,EAAD,CAAQC,QAAQ,OAAOC,QAAS,WAClClC,QAAQC,IAAI,mBAAoBX,GAChC,IAAMgD,EAAkBpD,EAAUQ,MAAK,SAACa,GAAD,OAAYA,EAASrF,IAAIoE,EAAmBpE,MAChFoH,IACDlD,EAAW,2BACND,GADK,IAERD,UAAU,GAAD,mBAAMC,EAAUD,WAAhB,CAA2B,CAClChE,GAAIoH,EAAgBpH,GACpB+B,OAAQqF,EAAgBrF,OACxBoC,KAAMC,EAAmBD,WAG7BE,EAA0B,CACxBrE,GAAI,EACJmE,KAAM,OAGTgD,UAAU,WAjBT,SAiBoB,cAAC,IAAD,oBAKhC,qCACE,+CACA,eAACnE,EAAA,EAAKE,MAAN,CAAYI,UAAU,SAAtB,UACI,cAACN,EAAA,EAAKO,MAAN,qBACA,eAACP,EAAA,EAAKQ,QAAN,CAAcL,GAAG,SAASM,KAAK,OAAOtB,SAAUuC,EAAmBhC,MAAOuB,EAAUF,UAAU/D,GAA9F,UACE,wBAAQA,GAAG,MACV4F,EAAqBzE,KAAI,SAAC4C,GAAD,OACxB,wBAA2B/D,GAAI0G,OAAO3C,EAAU/D,IAAK0C,MAAOgE,OAAO3C,EAAU/D,IAA7E,SAAmF+D,EAAUhC,QAAhFgC,EAAU/D,gBAKjC,eAAC8G,EAAA,EAAD,CAAQC,QAAQ,UAAUtD,KAAK,SAA/B,WAC+B,IAA5B6B,EAAcxE,WAAuB,cAACuG,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,OADzE,iBAIF,eAACC,EAAA,EAAD,CACEC,KAAMnC,EAAchE,OAASgE,EAAc7D,MAC3C8F,KAAK,KACLG,kBAAgB,gCAChBC,UAAQ,EAJV,UAME,cAACH,EAAA,EAAMI,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACL,EAAA,EAAMM,MAAP,CAAa9H,GAAG,gCAAhB,yBAIF,cAACwH,EAAA,EAAMO,KAAP,UACEzB,MAEF,cAACkB,EAAA,EAAMQ,OAAP,UACE,cAAClB,EAAA,EAAD,4BASJ,eAACU,EAAA,EAAD,CACEC,MAAO/B,EAAoB5E,UAC3ByG,KAAK,KACLG,kBAAgB,gCAChBC,UAAQ,EAJV,UAME,cAACH,EAAA,EAAMI,OAAP,UACE,cAACJ,EAAA,EAAMM,MAAP,CAAa9H,GAAG,gCAAhB,wBAIF,cAACwH,EAAA,EAAMO,KAAP,UACE,cAACV,EAAA,EAAD,CAASC,UAAU,oBCxTZ,G,MAAA,WACb,OAAO,qCACL,eAACW,EAAA,EAAD,CAAQC,GAAG,OAAOnB,QAAQ,OAA1B,UACE,cAACkB,EAAA,EAAOE,MAAR,CAAcC,KAAK,QAAnB,oBACA,eAACC,EAAA,EAAD,CAAKlB,UAAU,UAAf,UACE,cAACkB,EAAA,EAAIC,KAAL,CAAUF,KAAK,QAAf,kBACA,cAACC,EAAA,EAAIC,KAAL,CAAUF,KAAK,YAAf,sBACA,cAACC,EAAA,EAAIC,KAAL,CAAUF,KAAK,WAAf,wBAEF,eAACpF,EAAA,EAAD,CAAMuF,QAAM,EAAZ,UACE,cAACvF,EAAA,EAAKQ,QAAN,CAAcC,KAAK,OAAOxE,YAAY,SAASkI,UAAU,YACzD,cAACL,EAAA,EAAD,CAAQC,QAAQ,eAAhB,0BAGJ,cAACyB,EAAA,EAAD,CAAWvI,MAAO,CAACsG,UAAW,IAA9B,SACE,cAACkC,EAAD,WCPSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d55b7892.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\"\r\n\r\nexport const LoadingInput = (props: React.ComponentProps<'input'> & { loading: boolean }) => {\r\n    const [count, setCount] = useState(0);\r\n    const {placeholder, loading} = props\r\n\r\n    useEffect(()=>{\r\n        const timeout = setInterval(()=>{\r\n            setCount((count)=>(count+1)%3)\r\n        }, 1000)\r\n        return ()=>clearInterval(timeout)\r\n    }, [])\r\n    const loadingPlaceholder = placeholder + (loading ? (new Array(count+1).join('.')) : \"\")\r\n    return <input {...props} placeholder={loadingPlaceholder} />\r\n}","import React, {useEffect} from 'react'\r\nimport PDFObject from 'pdfobject'\r\n\r\nexport function PDFViewer({url, height}:{url: string, height: number}) {\r\n    useEffect(()=>{\r\n      var options = {\r\n        fallbackLink: '<p>Este navegador no soporta la visualizacion de archivos PDF en linea, por favor descarga el archivo haciendo clic : <a href=\"[url]\">aquí</a></p>'\r\n      };\r\n     \r\n      PDFObject.embed(url, \"#pdfcontainer\", options);\r\n    }, [url])\r\n    return <div id=\"pdfcontainer\" style={{height}}></div>\r\n  }","import { useRef, useEffect, useState, useCallback, DependencyList, MutableRefObject, useMemo } from 'react'\r\n\r\nexport const useCallbackRef = <T extends (...args: any[]) => any>(callback: T, deps: DependencyList): MutableRefObject<T> => {\r\n  const callbackRef = useRef(callback)\r\n  useEffect(() => {\r\n\tcallbackRef.current = callback\r\n  }, [deps])\r\n  return callbackRef\r\n}\r\ntype FetchState = {\r\n  completed?: boolean,\r\n  data?: any,\r\n  error?: boolean\r\n}\r\n\r\ntype Fetcher = [\r\n  state: FetchState,\r\n  send: ()=>void\r\n]\r\n\r\nexport const useFetch = (callback: ()=>Promise<Response> | Promise<Response[]>, deps: DependencyList):Fetcher=>{\r\n  const [state, setState] = useState<FetchState>({});\r\n  const fetchRef = useCallbackRef(callback, deps)\r\n  const send = useCallback(()=>{\r\n    const request = async ()=>{\r\n      setState({\r\n        completed: false,\r\n      })\r\n      const response = await fetchRef.current()\r\n      const data = await (Array.isArray(response) ? Promise.all(response.map(r=>r.json())) : response.json())\r\n      if(Array.isArray(response) ? response.every(r=>r.ok) : response.ok){\r\n        setState({\r\n          completed: true,\r\n          data,\r\n          error: false\r\n        })\r\n      }\r\n      else{\r\n        setState({\r\n          completed: true,\r\n          data,\r\n          error: false\r\n        })\r\n      }\r\n    }\r\n    request().catch((e)=>{\r\n      setState({\r\n        completed: true,\r\n        error: true\r\n      })\r\n    })\r\n  },[])\r\n\r\n  return [state, send]\r\n}","import React, { useState, useCallback, useRef, useEffect } from 'react'\r\nimport { Form, Col, FormControlProps } from 'react-bootstrap'\r\nimport {LoadingInput} from '../../../commons/components'\r\nimport {useFetch} from '../../../commons/hooks'\r\nimport {baseUrl} from \"../../../configs/app.json\"\r\n\r\ntype Paciente = {\r\n  id: number,\r\n  carnet: string,\r\n  nombre: string,\r\n  empresa: {\r\n    nombre: string,\r\n    estado: string\r\n  }\r\n}\r\n\r\ntype Props = {\r\n  paciente: Paciente,\r\n  onChange: (paciente: Paciente)=>void\r\n}\r\n\r\nconst initial = {\r\n  id: 0,\r\n  carnet: \"\",\r\n  nombre: \"\",\r\n  empresa: {\r\n    nombre: \"\",\r\n    estado: \"\"\r\n  }\r\n}\r\n\r\nexport default ({paciente, onChange}: Props) => {\r\n  const lastCarnet = useRef(paciente.carnet)\r\n  const [stateOfGetPaciente, getPaciente] = useFetch(()=>fetch(baseUrl + `/pacientes?carnet=${paciente.carnet}`), [paciente.carnet])\r\n\r\n  const onChangeCarnet = useCallback<NonNullable<FormControlProps[\"onChange\"]>>((e)=>{\r\n    const value = e.target.value.toUpperCase()\r\n    onChange({\r\n      ...initial,\r\n      carnet: value\r\n    })\r\n  }, [paciente])\r\n\r\n  const onBlurCarnet = useCallback((e: React.FocusEvent<HTMLInputElement>)=>{\r\n    if(lastCarnet.current != paciente.carnet){\r\n      lastCarnet.current = paciente.carnet\r\n      getPaciente()\r\n    }\r\n  }, [paciente.carnet])\r\n\r\n  useEffect(()=>{\r\n    if(stateOfGetPaciente.completed && !stateOfGetPaciente.error){\r\n      const data = stateOfGetPaciente.data as Array<Paciente>\r\n      if(data.length){\r\n        onChange(data[0])\r\n      }\r\n    }\r\n  }, [stateOfGetPaciente])\r\n\r\n  return <fieldset title=\"Paciente\" >\r\n  <legend>Paciente</legend>\r\n  <Form.Row>\r\n    <Form.Group as={Col} sm controlId=\"carnet_paciente\">\r\n      <Form.Label>Nº Carnet</Form.Label>\r\n      <Form.Control type=\"text\" \r\n        isInvalid={stateOfGetPaciente.completed && !stateOfGetPaciente.error && !stateOfGetPaciente.data.length} \r\n        onChange={onChangeCarnet} \r\n        onBlur={onBlurCarnet} value={paciente.carnet} />\r\n    </Form.Group>\r\n    <Form.Group as={Col} sm={9} controlId=\"nombre_paciente\">\r\n      <Form.Label>Nombre</Form.Label>\r\n      <Form.Control  as={LoadingInput} loading={stateOfGetPaciente.completed===false}\r\n        placeholder={stateOfGetPaciente.completed===false ? \"Buscando\":  stateOfGetPaciente.error ? \"Error\" : \"\"}\r\n        readOnly type=\"text\" value={paciente.nombre.toUpperCase()} />\r\n    </Form.Group>\r\n  </Form.Row>\r\n  <Form.Row>\r\n    <Form.Group as={Col} sm={9} controlId=\"empresa\">\r\n      <Form.Label>Empresa</Form.Label>\r\n      <Form.Control as={LoadingInput} loading={stateOfGetPaciente.completed===false}\r\n        placeholder={stateOfGetPaciente.completed===false ? \"Buscando\":  stateOfGetPaciente.error ? \"Error\" : \"\"}\r\n        readOnly type=\"text\" value={paciente.empresa.nombre.toUpperCase()} />\r\n    </Form.Group>\r\n    <Form.Group as={Col} sm controlId=\"estado\">\r\n      <Form.Label>Estado</Form.Label>\r\n      <Form.Control  as={LoadingInput} loading={stateOfGetPaciente.completed===false}\r\n        placeholder={stateOfGetPaciente.completed===false ? \"Buscando\":  stateOfGetPaciente.error ? \"Error\" : \"\"}\r\n        readOnly type=\"text\" isInvalid={paciente.empresa.estado==\"Mora\"} value={paciente.empresa.estado.toUpperCase()} />\r\n    </Form.Group>\r\n  </Form.Row>\r\n</fieldset>\r\n\r\n}","import React, { useCallback, useState, useEffect, useRef} from 'react';\r\nimport { Form, Button, Table, FormControlProps, Spinner, Modal } from 'react-bootstrap'\r\nimport { FaMinus as FaTrash, FaPlus } from 'react-icons/fa'\r\nimport PacientFieldset from './PacientFieldset'\r\nimport { PDFViewer } from './../../../commons/components'\r\nimport {useFetch} from'./../../../commons/hooks'\r\nimport {baseUrl} from './../../../configs/app.json'\r\n\r\ntype Doctor = {\r\n  id: number,\r\n  nombre: string,\r\n}\r\ntype Proveedor = {\r\n  id: number,\r\n  nombre: string,\r\n  servicios: {\r\n    id: number,\r\n  }[]\r\n}\r\ntype Servicio = {\r\n  id: number,\r\n  nombre: string,\r\n}\r\n\r\ntype FormState = {\r\n  paciente: {\r\n    id: number,\r\n    carnet: string,\r\n    nombre: string,\r\n    empresa: {\r\n      nombre: string,\r\n      estado: string\r\n    }\r\n  },\r\n  doctor: {\r\n    id: number,\r\n    nombre: string,\r\n  },\r\n  proveedor: {\r\n    id: number,\r\n    nombre: string,\r\n    servicios: {\r\n      id: number\r\n    }[]\r\n  },\r\n  servicios: {\r\n    id: number,\r\n    nombre: string,\r\n    nota: string\r\n  }[]\r\n}\r\n\r\nfunction TransferenciaExternaForm() {\r\n  const [formState, updateForm] = useState<FormState>({\r\n    paciente: {\r\n      id: 0,\r\n      carnet: \"\",\r\n      nombre: \"\",\r\n      empresa: {\r\n        nombre: \"\",\r\n        estado: \"\"\r\n      },\r\n    },\r\n    doctor: {\r\n      id: 0,\r\n      nombre: \"\",\r\n    },\r\n    proveedor: {\r\n      id: 0,\r\n      nombre: \"\",\r\n      servicios: []\r\n    },\r\n    servicios: []\r\n  })\r\n\r\n  const [servicioSolicitado, updateServiciosSolicitado] = useState({\r\n    id: 0,\r\n    nota: \"\"\r\n  })\r\n\r\n  const onChangeDoctor = useCallback<NonNullable<FormControlProps[\"onChange\"]>>((e)=>{\r\n    updateForm({\r\n      ...formState,\r\n      doctor: doctores.find(doctor=>doctor.id == parseInt(e.target.value)) || {id: 0, nombre: \"\"}\r\n    })\r\n  }, [formState])\r\n\r\n  const onChangeProveedor = useCallback<NonNullable<FormControlProps[\"onChange\"]>>((e)=>{\r\n    updateForm({\r\n      ...formState,\r\n      proveedor: proveedores.find(proveedor=>proveedor.id == parseInt(e.target.value)) || {id: 0, nombre: \"\", servicios: []}\r\n    })\r\n  }, [formState])\r\n\r\n  const a = useRef(Math.random())\r\n  console.log(\"Random\", a)\r\n\r\n  const [stateOfSubmit, submit] = useFetch(()=>{\r\n    return fetch(baseUrl+\"/transferencias\", {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        \"paciente_id\": formState.paciente.id,\r\n        \"doctor_id\": formState.doctor.id,\r\n        \"proveedor_id\": formState.proveedor.id,\r\n        \"servicios_ids\": formState.servicios.map((servicio)=>servicio.id)\r\n      })\r\n    })\r\n  }, [formState])\r\n\r\n  const onSubmit = useCallback((e) => {\r\n    e.preventDefault()\r\n    submit()\r\n  }, [])\r\n\r\n  const [stateOfLoadInitData, loadData] = useFetch(()=>{\r\n    return Promise.all([\r\n      fetch(baseUrl + \"/doctores\"),\r\n      fetch(baseUrl + \"/proveedores\"),\r\n      fetch(baseUrl + \"/servicios\")\r\n    ])\r\n  }, [])\r\n  const [doctores, proveedores, servicios] = (stateOfLoadInitData.data || [[],[],[]]) as [Doctor[], Proveedor[],Servicio[]]\r\n\r\n  const [proveedoresAdecuados, updateProveedoresAdecuados] = useState(proveedores)\r\n  const [serviciosDisponibles, updateServiciosDisponibles] = useState(servicios)\r\n  \r\n  useEffect(()=>loadData(), [])\r\n  useEffect(()=>{\r\n    if(stateOfLoadInitData.completed && !stateOfLoadInitData.error){\r\n      const nuevosProveedores = proveedores.filter(proveedor=>{\r\n        return formState.servicios.every(rs => {\r\n          return proveedor.servicios.some(ps => ps.id ==rs.id)\r\n        })\r\n      })\r\n      updateProveedoresAdecuados(\r\n        nuevosProveedores\r\n      )\r\n      if(!nuevosProveedores.some(np => np.id == formState.proveedor.id)){\r\n        updateForm({\r\n          ...formState,\r\n          proveedor: {\r\n            id: 0,\r\n            nombre: \"\",\r\n            servicios: []\r\n          }\r\n        })\r\n      }\r\n      if(nuevosProveedores.length == 1){\r\n        updateForm({\r\n          ...formState,\r\n          proveedor: nuevosProveedores[0]\r\n        })\r\n      }\r\n      const serviciosDisponibles = servicios.filter(as=>{\r\n        return nuevosProveedores.some(proveedor => {\r\n          return !formState.servicios.some(rs => rs.id ==as.id) && proveedor.servicios.some(ps => ps.id == as.id)\r\n        })\r\n      })\r\n      updateServiciosDisponibles(serviciosDisponibles)\r\n    }\r\n  }, [formState.servicios, stateOfLoadInitData])\r\n\r\n  const renderServicios = ()=>{\r\n    return formState.servicios.map((value, index)=>(\r\n      <tr>\r\n        <td>{index+1}</td>\r\n        <td>{value.nombre}</td>\r\n        <td>{value.nota}</td>\r\n        <td><Button variant=\"link\" onClick={()=>{\r\n          updateForm({\r\n            ...formState,\r\n            servicios: formState.servicios.filter((v, i)=>index != i)\r\n          })\r\n        }} className=\"btn-icon\"><FaTrash /></Button></td>\r\n      </tr>\r\n    ))\r\n  }\r\n\r\n  const renderPdf = () => {\r\n    const url = stateOfSubmit.data && stateOfSubmit.data.url\r\n    return url ? <PDFViewer url={url} height={400}></PDFViewer> : null\r\n  }\r\n  console.log(\"FormState\", formState)\r\n  const renderForm = () => {\r\n    return <>\r\n    <Form style={{marginTop:20, marginBottom:20}} onSubmit={onSubmit}>\r\n      <PacientFieldset paciente={formState.paciente} onChange={(paciente)=>{\r\n        updateForm({\r\n          ...formState,\r\n          paciente\r\n        })\r\n      }} />\r\n      <fieldset>\r\n        <legend>Doctor</legend>\r\n        <Form.Group controlId=\"doctor\">\r\n            <Form.Label>Nombre</Form.Label>\r\n            <Form.Control as=\"select\" type=\"text\" onChange={onChangeDoctor} value={formState.doctor.id}>\r\n              <option id=\"0\"></option>\r\n              {doctores.map((doctor)=>{\r\n                return <option key={doctor.id} id={String(doctor.id)} value={String(doctor.id)}>{doctor.nombre}</option>\r\n              })}\r\n            </Form.Control>\r\n          </Form.Group>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Servicios</legend>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <th style={{width:0}}>#</th>\r\n              <th>Nombre</th>\r\n              <th>Nota</th>\r\n              <th style={{width:0}}></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {renderServicios()}\r\n            <tr>\r\n              <td>{formState.servicios.length+1}</td>\r\n              <td><Form.Control as=\"select\"\r\n                value={servicioSolicitado.id}\r\n                onChange={(e)=>{\r\n                console.log(\"onChange required service\", e.target.value)\r\n                updateServiciosSolicitado({\r\n                  ...servicioSolicitado,\r\n                  id: parseInt(e.target.value),\r\n                })\r\n              }}>\r\n                <option id=\"0\"></option>\r\n                {serviciosDisponibles.map((servicio)=>(\r\n                  <option key={servicio.id} id={String(servicio.id)} value={String(servicio.id)}>{servicio.nombre}</option>\r\n                ))}\r\n              </Form.Control></td>\r\n              <td><Form.Control as=\"textarea\"\r\n                value={servicioSolicitado.nota}\r\n                onChange={(e)=>{\r\n                updateServiciosSolicitado({\r\n                  ...servicioSolicitado,\r\n                  nota: e.target.value\r\n                })\r\n              }}></Form.Control></td>\r\n              <td><Button variant=\"link\" onClick={()=>{\r\n                console.log(\"Required Service\", servicioSolicitado)\r\n                const selectedService = servicios.find((servicio)=>servicio.id==servicioSolicitado.id)\r\n                if(selectedService){\r\n                  updateForm({\r\n                    ...formState,\r\n                    servicios: [...formState.servicios, {\r\n                      id: selectedService.id,\r\n                      nombre: selectedService.nombre,\r\n                      nota: servicioSolicitado.nota\r\n                    }]\r\n                  })\r\n                  updateServiciosSolicitado({\r\n                    id: 0,\r\n                    nota: \"\"\r\n                  })\r\n                }\r\n              }} className=\"btn-icon\"><FaPlus /></Button></td>\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Proveedor</legend>\r\n        <Form.Group controlId=\"doctor\">\r\n            <Form.Label>Nombre</Form.Label>\r\n            <Form.Control as=\"select\" type=\"text\" onChange={onChangeProveedor} value={formState.proveedor.id}>\r\n              <option id=\"0\"></option>\r\n              {proveedoresAdecuados.map((proveedor)=>(\r\n                <option key={proveedor.id} id={String(proveedor.id)} value={String(proveedor.id)}>{proveedor.nombre}</option>\r\n              ))}\r\n            </Form.Control>\r\n          </Form.Group>\r\n      </fieldset>\r\n      <Button variant=\"primary\" type=\"submit\">\r\n        {stateOfSubmit.completed === false && <Spinner animation=\"border\" size=\"sm\" />} Guardar\r\n      </Button>\r\n    </Form>\r\n    <Modal\r\n      show={stateOfSubmit.data && !stateOfSubmit.error}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          D.M. - 11\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n       {renderPdf()}\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n    </>\r\n  }\r\n\r\n  return <>\r\n    <h1>Transferencia externa</h1>\r\n    {renderForm()}\r\n    <Modal\r\n      show={!stateOfLoadInitData.completed}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Cargando\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Spinner animation=\"border\" />\r\n      </Modal.Body>\r\n    </Modal>\r\n  </>\r\n}\r\n\r\nconst App = TransferenciaExternaForm;\r\n\r\nexport default App;\r\n","import React, { useCallback, useState, useEffect, useRef, DependencyList, MutableRefObject} from 'react';\nimport { Container, Form, Button, Col, Table, FormControlProps, Navbar, Nav, Spinner, Modal } from 'react-bootstrap'\nimport { default as TransferForm } from \"./features/transfers/components/TransferForm\"\nimport logo from './logo.svg';\nimport './App.css';\n\nexport default ()=>{\n  return <>\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <Navbar.Brand href=\"#home\">Navbar</Navbar.Brand>\n      <Nav className=\"mr-auto\">\n        <Nav.Link href=\"#home\">Home</Nav.Link>\n        <Nav.Link href=\"#features\">Features</Nav.Link>\n        <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\n      </Nav>\n      <Form inline>\n        <Form.Control type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n        <Button variant=\"outline-info\">Search</Button>\n      </Form>\n    </Navbar>\n    <Container style={{marginTop: 20}}>\n      <TransferForm />\n    </Container>\n  </>\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}