{"version":3,"sources":["App.tsx","useCallbackRef.tsx","reportWebVitals.ts","index.tsx"],"names":["baseUrl","PDFViewer","url","height","useEffect","PDFObject","embed","fallbackLink","id","style","App","useState","paciente","carnet","nombre","empresa","estado","doctor","proveedor","servicios","formState","updateForm","nota","servicioSolicitado","updateServiciosSolicitado","onChangeCarnetPaciente","useCallback","e","value","target","toUpperCase","onChangeDoctor","doctores","find","parseInt","onChangeProveedor","proveedores","completed","error","stateOfGetPaciente","updateStateOfGetPaciente","a","useRef","Math","random","console","log","onGetPacienteData","callback","deps","callbackRef","current","useCallbackRef","onBlurCarnetPaciente","fetch","response","ok","Error","status","json","data","length","undefined","getPacienteData","catch","message","stateOfSubmit","updateStateOfSubmit","onSubmit","preventDefault","method","headers","body","JSON","stringify","map","servicio","result","submit","stateOfLoadInitData","updateStateOfLoadInitData","proveedoresAdecuados","updateProveedoresAdecuados","serviciosDisponibles","updateServiciosDisponibles","nuevosProveedores","filter","every","rs","some","ps","np","as","Promise","all","r","loadInitData","renderPdf","Navbar","bg","variant","Brand","href","Nav","className","Link","Form","inline","Control","type","placeholder","Button","Container","marginTop","marginBottom","title","Row","Group","Col","sm","controlId","Label","isInvalid","onChange","onBlur","readOnly","String","Table","width","index","onClick","v","i","selectedService","Modal","show","size","aria-labelledby","centered","Header","closeButton","Title","Body","Footer","Spinner","animation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.01775995.chunk.js","sourcesContent":["import React, { useCallback, useState, useEffect, useRef, DependencyList, MutableRefObject} from 'react';\nimport { Container, Form, Button, Col, Table, FormControlProps, Navbar, Nav, Spinner, Modal } from 'react-bootstrap'\nimport { FaMinus as FaTrash, FaPlus, FaPlusCircle } from 'react-icons/fa'\n//@ts-ignore\nimport PDFObject from 'pdfobject'\nimport useCallbackRef from'./useCallbackRef'\nimport logo from './logo.svg';\nimport './App.css';\n\nconst baseUrl = \"https://cscra2.mybluemix.net/api\";\n\ntype StateOfSubmit = {\n  completed: boolean,\n  data?: {\n    url: string\n  },\n  error: boolean\n}\n\ntype StateOfGetPaciente = {\n  completed: boolean,\n  data?: {\n    id: number,\n    carnet: string,\n    nombre: string,\n    empresa: {\n      nombre: string,\n      estado: string\n    },\n  },\n  error: boolean\n}\n\ntype StateOfLoadInitData = {\n  completed: boolean,\n  data?: {\n    doctores: {\n      id: number,\n      nombre: string,\n    }[],\n    proveedores: {\n      id: number,\n      nombre: string,\n      servicios: {\n        id: number,\n      }[]\n    }[],\n    servicios: {\n      id: number,\n      nombre: string,\n    }[]\n  },\n  error: boolean\n}\n\n\ntype FormState = {\n  paciente: {\n    id: number,\n    carnet: string,\n    nombre: string,\n    empresa: {\n      nombre: string,\n      estado: string\n    }\n  },\n  doctor: {\n    id: number,\n    nombre: string,\n  },\n  proveedor: {\n    id: number,\n    nombre: string,\n    servicios: {\n      id: number\n    }[]\n  },\n  servicios: {\n    id: number,\n    nombre: string,\n    nota: string\n  }[]\n}\n\nfunction PDFViewer({url, height}:{url: string, height: number}) {\n  useEffect(()=>{\n    var options = {\n      fallbackLink: '<p>Este navegador no soporta la visualizacion de archivos PDF en linea, por favor descarga el archivo haciendo clic : <a href=\"[url]\">aquí</a></p>'\n    };\n   \n    PDFObject.embed(url, \"#pdfcontainer\", options);\n  }, [url])\n  return <div id=\"pdfcontainer\" style={{height}}></div>\n}\n\nfunction TransferenciaExternaForm() {\n  const [formState, updateForm] = useState<FormState>({\n    paciente: {\n      id: 0,\n      carnet: \"\",\n      nombre: \"\",\n      empresa: {\n        nombre: \"\",\n        estado: \"\"\n      },\n    },\n    doctor: {\n      id: 0,\n      nombre: \"\",\n    },\n    proveedor: {\n      id: 0,\n      nombre: \"\",\n      servicios: []\n    },\n    servicios: []\n  })\n\n  const [servicioSolicitado, updateServiciosSolicitado] = useState({\n    id: 0,\n    nota: \"\"\n  })\n\n  const onChangeCarnetPaciente = useCallback<NonNullable<FormControlProps[\"onChange\"]>>((e)=>{\n    const value = e.target.value.toUpperCase()\n    updateForm({\n      ...formState,\n      paciente: {\n        ...formState.paciente,\n        carnet: value\n      }\n    })\n  }, [formState])\n\n  const onChangeDoctor = useCallback<NonNullable<FormControlProps[\"onChange\"]>>((e)=>{\n    updateForm({\n      ...formState,\n      doctor: doctores.find(doctor=>doctor.id == parseInt(e.target.value)) || {id: 0, nombre: \"\"}\n    })\n  }, [formState])\n\n  const onChangeProveedor = useCallback<NonNullable<FormControlProps[\"onChange\"]>>((e)=>{\n    updateForm({\n      ...formState,\n      proveedor: proveedores.find(proveedor=>proveedor.id == parseInt(e.target.value)) || {id: 0, nombre: \"\", servicios: []}\n    })\n  }, [formState])\n\n  const [stateOfGetPaciente, updateStateOfGetPaciente] = useState<StateOfGetPaciente>({\n    completed: false,\n    error: false\n  })\n\n  const a = useRef(Math.random())\n  console.log(a)\n\n  const onGetPacienteData = useCallbackRef((paciente: FormState[\"paciente\"])=>{\n    updateForm({\n      ...formState,\n      paciente\n    })\n    console.log(paciente)\n  }, [formState])\n\n  const onBlurCarnetPaciente = useCallback((e: React.FocusEvent<HTMLInputElement>)=>{\n    const getPacienteData = async (carnet: string) => {\n      updateStateOfGetPaciente({\n        completed: false,\n        error: false\n      })\n      const response = await fetch(baseUrl + `/pacientes?carnet=${carnet}`)\n      if (!response.ok) {\n        updateStateOfGetPaciente({\n          completed: true,\n          error: true,\n        })\n        throw new Error(`HTTP error! status: ${response.status}`);\n      } else {\n        const paciente = await response.json();\n        console.log(\"GetPaciente\", paciente)\n        updateStateOfGetPaciente({\n          completed: true,\n          data: paciente.length ? paciente[0]: undefined,\n          error: false\n        })        \n        if(paciente.length){\n          onGetPacienteData.current(paciente[0])\n        }\n      }\n    }\n    getPacienteData(formState.paciente.carnet).catch(\n      (e)=> console.error(e.message)\n    )\n  }, [formState.paciente.carnet])\n\n  const [stateOfSubmit, updateStateOfSubmit] = useState<StateOfSubmit>({\n    completed: false,\n    error: false\n  })\n\n  const onSubmit = useCallback((e) => {\n    e.preventDefault()\n    const submit = async () => {\n      updateStateOfSubmit({\n        completed: false,\n        error: false\n      })\n      const response = await fetch(baseUrl+\"/transferencias\", {\n        method: 'POST',      \n        // mode: 'cors',\n        // credentials: 'same-origin',\n        headers: {\n          'Content-Type': 'application/json'\n          // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: JSON.stringify({\n          \"paciente_id\": formState.paciente.id,\n          \"doctor_id\": formState.doctor.id,\n          \"proveedor_id\": formState.proveedor.id,\n          \"servicios_ids\": formState.servicios.map((servicio)=>servicio.id)\n        })\n      })\n  \n      if (!response.ok) {\n        updateStateOfSubmit({\n          completed: true,\n          error: true\n        })\n        throw new Error(`HTTP error! status: ${response.status}`);\n      } else {\n        const result = await response.json()\n        updateStateOfSubmit({\n            completed: true,\n            data: result,\n            error: false\n        })\n      }\n    }\n\n    submit().catch(\n      (e)=> console.error(e.message)\n    )\n  }, [formState])\n\n  const [stateOfLoadInitData, updateStateOfLoadInitData] = useState<StateOfLoadInitData>({\n    completed: false,\n    error: false\n  })\n  const {doctores, proveedores, servicios}: StateOfLoadInitData[\"data\"] = stateOfLoadInitData.data || {doctores:[], proveedores:[], servicios:[]}\n  const [proveedoresAdecuados, updateProveedoresAdecuados] = useState(proveedores)\n  const [serviciosDisponibles, updateServiciosDisponibles] = useState(servicios)\n\n  useEffect(()=>{\n    if(stateOfLoadInitData.completed && !stateOfLoadInitData.error){\n      const nuevosProveedores = proveedores.filter(proveedor=>{\n        return formState.servicios.every(rs => {\n          return proveedor.servicios.some(ps => ps.id ==rs.id)\n        })\n      })\n      console.log(\"Proveedores\", nuevosProveedores)\n      updateProveedoresAdecuados(\n        nuevosProveedores\n      )\n      if(!nuevosProveedores.some(np => np.id == formState.proveedor.id)){\n        updateForm({\n          ...formState,\n          proveedor: {\n            id: 0,\n            nombre: \"\",\n            servicios: []\n          }\n        })\n      }\n      if(nuevosProveedores.length == 1){\n        updateForm({\n          ...formState,\n          proveedor: nuevosProveedores[0]\n        })\n      }\n      const serviciosDisponibles = servicios.filter(as=>{\n        return nuevosProveedores.some(proveedor => {\n          return !formState.servicios.some(rs => rs.id ==as.id) && proveedor.servicios.some(ps => ps.id == as.id)\n        })\n      })\n      console.log(\"Servicios\", serviciosDisponibles)\n      updateServiciosDisponibles(serviciosDisponibles)\n    }\n  }, [formState.servicios, stateOfLoadInitData])\n\n  useEffect(() => {\n    const loadInitData = async () => {\n      const response = await Promise.all([\n        fetch(baseUrl + \"/doctores\"),\n        fetch(baseUrl + \"/proveedores\"),\n        fetch(baseUrl + \"/servicios\")\n      ])\n\n      if (response.some(r=>!r.ok)) {\n        console.log(\"Init Failed\");\n        updateStateOfLoadInitData({\n          completed: true,\n          error: true\n        })\n        throw new Error(`HTTP error! status: `);\n      } else {\n        const [doctores, proveedores, servicios] = await Promise.all(response.map((r)=> r.json()))\n        console.log(\"Init Success\", {doctores, proveedores, servicios});\n        updateStateOfLoadInitData({\n            completed: true,\n            data: {doctores, proveedores, servicios},\n            error: false\n        })\n      }\n    }\n    loadInitData().catch(\n      (e)=> console.error(e.message)\n    )\n  }, [])\n\n\n  const renderServicios = ()=>{\n    return formState.servicios.map((value, index)=>(\n      <tr>\n        <td>{index+1}</td>\n        <td>{value.nombre}</td>\n        <td>{value.nota}</td>\n        <td><Button variant=\"link\" onClick={()=>{\n          updateForm({\n            ...formState,\n            servicios: formState.servicios.filter((v, i)=>index != i)\n          })\n        }} className=\"btn-icon\"><FaTrash /></Button></td>\n      </tr>\n    ))\n  }\n\n  const renderPdf = () => {\n    const url = stateOfSubmit.data && stateOfSubmit.data.url\n    return url ? <PDFViewer url={url} height={400}></PDFViewer> : null\n  }\n  console.log(\"FormState\", formState)\n  const renderForm = () => {\n    return <>\n    <Form style={{marginTop:20, marginBottom:20}} onSubmit={onSubmit}>\n      <fieldset title=\"Paciente\" >\n        <legend>Paciente</legend>\n        <Form.Row>\n          <Form.Group as={Col} sm controlId=\"carnet_paciente\">\n            <Form.Label>Nº Carnet</Form.Label>\n            <Form.Control type=\"text\" isInvalid={stateOfGetPaciente.completed && !stateOfGetPaciente.error && !stateOfGetPaciente.data} onChange={onChangeCarnetPaciente} onBlur={onBlurCarnetPaciente} value={formState.paciente.carnet} />\n          </Form.Group>\n          <Form.Group as={Col} sm={9} controlId=\"nombre_paciente\">\n            <Form.Label>Nombre</Form.Label>\n            <Form.Control readOnly type=\"text\" value={formState.paciente.nombre.toUpperCase()} />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} sm={9} controlId=\"empresa\">\n            <Form.Label>Empresa</Form.Label>\n            <Form.Control readOnly type=\"text\" value={formState.paciente.empresa.nombre.toUpperCase()} />\n          </Form.Group>\n          <Form.Group as={Col} sm controlId=\"estado\">\n            <Form.Label>Estado</Form.Label>\n            <Form.Control readOnly type=\"text\" isInvalid={formState.paciente.empresa.estado==\"Mora\"} value={formState.paciente.empresa.estado.toUpperCase()} />\n          </Form.Group>\n        </Form.Row>\n      </fieldset>\n      <fieldset>\n        <legend>Doctor</legend>\n        <Form.Group controlId=\"doctor\">\n            <Form.Label>Nombre</Form.Label>\n            <Form.Control as=\"select\" type=\"text\" onChange={onChangeDoctor} value={formState.doctor.id}>\n              <option id=\"0\"></option>\n              {doctores.map((doctor)=>{\n                return <option key={doctor.id} id={String(doctor.id)} value={String(doctor.id)}>{doctor.nombre}</option>\n              })}\n            </Form.Control>\n          </Form.Group>\n      </fieldset>\n      <fieldset>\n        <legend>Servicios</legend>\n        <Table>\n          <thead>\n            <tr>\n              <th style={{width:0}}>#</th>\n              <th>Nombre</th>\n              <th>Nota</th>\n              <th style={{width:0}}></th>\n            </tr>\n          </thead>\n          <tbody>\n            {renderServicios()}\n            <tr>\n              <td>{formState.servicios.length+1}</td>\n              <td><Form.Control as=\"select\"\n                value={servicioSolicitado.id}\n                onChange={(e)=>{\n                console.log(\"onChange required service\", e.target.value)\n                updateServiciosSolicitado({\n                  ...servicioSolicitado,\n                  id: parseInt(e.target.value),\n                })\n              }}>\n                <option id=\"0\"></option>\n                {serviciosDisponibles.map((servicio)=>(\n                  <option key={servicio.id} id={String(servicio.id)} value={String(servicio.id)}>{servicio.nombre}</option>\n                ))}\n              </Form.Control></td>\n              <td><Form.Control as=\"textarea\"\n                value={servicioSolicitado.nota}\n                onChange={(e)=>{\n                updateServiciosSolicitado({\n                  ...servicioSolicitado,\n                  nota: e.target.value\n                })\n              }}></Form.Control></td>\n              <td><Button variant=\"link\" onClick={()=>{\n                console.log(\"Required Service\", servicioSolicitado)\n                const selectedService = servicios.find((servicio)=>servicio.id==servicioSolicitado.id)\n                if(selectedService){\n                  updateForm({\n                    ...formState,\n                    servicios: [...formState.servicios, {\n                      id: selectedService.id,\n                      nombre: selectedService.nombre,\n                      nota: servicioSolicitado.nota\n                    }]\n                  })\n                  updateServiciosSolicitado({\n                    id: 0,\n                    nota: \"\"\n                  })\n                }\n              }} className=\"btn-icon\"><FaPlus /></Button></td>\n            </tr>\n          </tbody>\n        </Table>\n      </fieldset>\n      <fieldset>\n        <legend>Proveedor</legend>\n        <Form.Group controlId=\"doctor\">\n            <Form.Label>Nombre</Form.Label>\n            <Form.Control as=\"select\" type=\"text\" onChange={onChangeProveedor} value={formState.proveedor.id}>\n              <option id=\"0\"></option>\n              {proveedoresAdecuados.map((proveedor)=>(\n                <option key={proveedor.id} id={String(proveedor.id)} value={String(proveedor.id)}>{proveedor.nombre}</option>\n              ))}\n            </Form.Control>\n          </Form.Group>\n      </fieldset>\n      <Button variant=\"primary\" type=\"submit\">\n        Guardar\n      </Button>\n    </Form>\n    <Modal\n      show={stateOfSubmit.data && !stateOfSubmit.error}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          D.M. - 11\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n       {renderPdf()}\n      </Modal.Body>\n      <Modal.Footer>\n        <Button>Close</Button>\n      </Modal.Footer>\n    </Modal>\n    </>\n  }\n\n  return <>\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <Navbar.Brand href=\"#home\">Navbar</Navbar.Brand>\n      <Nav className=\"mr-auto\">\n        <Nav.Link href=\"#home\">Home</Nav.Link>\n        <Nav.Link href=\"#features\">Features</Nav.Link>\n        <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\n      </Nav>\n      <Form inline>\n        <Form.Control type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n        <Button variant=\"outline-info\">Search</Button>\n      </Form>\n    </Navbar>\n    <Container style={{marginTop: 20}}>\n      <h1>Transferencia externa</h1>\n      {!stateOfLoadInitData.completed ?\n        <Spinner animation=\"border\" /> :\n        renderForm()\n      }\n    </Container>\n  </>\n}\n\nconst App = TransferenciaExternaForm;\n\nexport default App;\n","import {useRef, useEffect, DependencyList, MutableRefObject} from 'react'\r\n\r\nexport default function useCallbackRef<T extends (...args: any[]) => any>(callback:  T, deps: DependencyList): MutableRefObject<T>{\r\n    const callbackRef = useRef(callback)\r\n    useEffect(()=>{\r\n      callbackRef.current = callback\r\n    }, [deps])\r\n    return callbackRef\r\n  }","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}